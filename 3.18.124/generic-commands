#!/usr/bin/env bash

PATCHES_FOLDER=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)
[[ "$(pwd)" =~ flash ]] && FLASH=true

function header() {
    echo -e "\033[01;31m"
    echo -e "====$(for i in $(seq ${#1}); do echo -e "=\c"; done)===="
    echo -e "==  ${1}  =="
    echo -e "====$(for i in $(seq ${#1}); do echo -e "=\c"; done)===="
    echo -e "\033[0m"
}

function die() {
    echo -e "\033[01;31m"
    echo "${@}"
    echo -e "\033[0m"
    exit 1
}

APPROVED_CONFLICTS=( "drivers/base/power/main.c:1"
                     "drivers/hid/hid-core.c:2"
                     "drivers/pci/pci.c:1"
                     "drivers/usb/core/devio.c:2"
                     "drivers/usb/core/driver.c:2"
                     "drivers/usb/serial/usb-serial-simple.c:1" )
readarray -t CONFLICTS <<< "$(git cf)"
if [[ -n "${CONFLICTS[*]}" ]]; then
    header "Resetting all conflicts"
    for CONFLICT in "${CONFLICTS[@]}"; do
        FOUND=false
        for APPROVED_CONFLICT in "${APPROVED_CONFLICTS[@]}"; do
            ACTION=$(echo "${APPROVED_CONFLICT}" | cut -d : -f 3)
            NOC=$(echo "${APPROVED_CONFLICT}" | cut -d : -f 2)
            APPROVED_CONFLICT=$(echo "${APPROVED_CONFLICT}" | cut -d : -f 1)
            [[ -z ${ACTION} ]] && ACTION=rf
            [[ ${CONFLICT} = ${APPROVED_CONFLICT} ]] && { FOUND=true; break; }
        done
        [[ ${NOC} -ne $(git lo HEAD..MERGE_HEAD "${CONFLICT}" | wc -l) ]] && die "${CONFLICT} resolution might be outdated!"
        if ${FOUND}; then
            case ${ACTION} in
                "rf") ACTION_STRING="Resetting" ;;
                "rm"*) ACTION_STRING="Removing" ;;
                *) die "Invalid action: ${ACTION}" ;;
            esac

            echo "${ACTION_STRING} ${CONFLICT}..."
            git "${ACTION}" "${CONFLICT}" &>/dev/null
        else
            die "${CONFLICT} not accounted for, bailing out!"
        fi
    done
    [[ -n "$(git cf)" ]] && die "Resetting conflicts failed!"

    header "Applying all patches"

    git ch MERGE_HEAD drivers/hid/hid-core.c || exit 1
    # 09796331234d ("Bluetooth: HID: Add Bus type for specific HID Keyboard") 
    git fp -1 --stdout 09796331234ddbed92a023d0d4c44ad3e9062209 | git ap --include drivers/hid/hid-core.c || exit 1

    git ap "${PATCHES_FOLDER}"/pci.c.diff || exit 1

    if [[ ! "$(git cb)" =~ android-8.1 ]]; then
        git ch MERGE_HEAD drivers/usb/core/driver.c || exit 1
        # dc0c1b6e7588 ("USB: leave LPM alone if possible when binding/unbinding interface drivers")
        git fp -1 --stdout dc0c1b6e75882998d048a19498b1a219a453531c | git ap --include include/linux/usb.h || exit 1
        # 1a39dd098f52 ("usb: hub: Do not attempt to autosuspend disconnected devices")
        git fp -1 --stdout 1a39dd098f52f430513b6e59032c0971799c15e7 | git ap --include drivers/usb/core/hub.c || exit 1
        # 97c4279bfcc2 ("USB: Allow skipping device resume during system resume")
        git fp -1 --stdout 97c4279bfcc2a622890f7a1596e4712f610d3b7a | git ap --include drivers/usb/core/driver.c || exit 1

        git ap "${PATCHES_FOLDER}"/main.c.diff || exit 1
    fi

    if [[ $(git cb) =~ r34 ]]; then
        git ch MERGE_HEAD drivers/usb/core/devio.c drivers/usb/serial/usb-serial-simple.c || exit 1
        # 8a9a66e499d3 ("USB: usbfs: fix potential infoleak in devio")
        git fp -1 --stdout 8a9a66e499d341f607059cc596990bc45eecc291 | git ap --include drivers/usb/core/devio.c || exit 1
        # 3e2003cccc9f ("USB: usbfs: allow URBs to be reaped after disconnection")
        git fp -1 --stdout 3e2003cccc9fb5f73a0d251dbb595f4c6e3a08bd | git ap --include include/uapi/linux/usbdevice_fs.h || exit 1
        # f180fa08aa47 ("USB: serial: simple: add Motorola Tetra driver")
        git fp -1 --stdout f180fa08aa474626b6853d8dc4e4ec2e8e4b3fc3 | git ap --include drivers/usb/serial/Kconfig || exit 1
    fi

    header "Committing merge"
    git fm || exit 1
fi

header "Applying additional commits"
rm -f *.patch
cp "${PATCHES_FOLDER}"/000*.patch .
sed -i "s/insert-commit-id-here/$(git log --format=%h -1 "$(git show -s --format=%P | awk '{print $2}')" drivers/staging/android/ion/ion.c)/g" 0002*.patch
git am *.patch || exit 1
rm -f *.patch
