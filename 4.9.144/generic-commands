#!/usr/bin/env bash

PATCHES_FOLDER=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)
[[ "$(pwd)" =~ flash ]] && FLASH=true

function header() {
    echo -e "\033[01;31m"
    echo -e "====$(for i in $(seq ${#1}); do echo -e "=\c"; done)===="
    echo -e "==  ${1}  =="
    echo -e "====$(for i in $(seq ${#1}); do echo -e "=\c"; done)===="
    echo -e "\033[0m"
}

function die() {
    echo -e "\033[01;31m"
    echo "${@}"
    echo -e "\033[0m"
    exit 1
}

APPROVED_CONFLICTS=( "drivers/android/binder.c:1"
                     "drivers/net/wireless/ath/wil6210/wmi.c:1"
                     "fs/f2fs/checkpoint.c:6"
                     "fs/f2fs/data.c:5"
                     "fs/f2fs/f2fs.h:4"
                     "fs/f2fs/inode.c:6"
                     "fs/f2fs/node.c:5"
                     "fs/f2fs/segment.c:5"
                     "fs/f2fs/segment.h:6"
                     "fs/f2fs/super.c:5" )
readarray -t CONFLICTS <<< "$(git cf)"
if [[ -n "${CONFLICTS[*]}" ]]; then
    header "Resetting all conflicts"
    for CONFLICT in "${CONFLICTS[@]}"; do
        FOUND=false
        for APPROVED_CONFLICT in "${APPROVED_CONFLICTS[@]}"; do
            ACTION=$(echo "${APPROVED_CONFLICT}" | cut -d : -f 3)
            NOC=$(echo "${APPROVED_CONFLICT}" | cut -d : -f 2)
            APPROVED_CONFLICT=$(echo "${APPROVED_CONFLICT}" | cut -d : -f 1)
            [[ -z ${ACTION} ]] && ACTION=rf
            [[ ${CONFLICT} = ${APPROVED_CONFLICT} ]] && { FOUND=true; break; }
        done
        [[ ${NOC} -ne $(git lo HEAD..MERGE_HEAD "${CONFLICT}" | wc -l) ]] && die "${CONFLICT} resolution might be outdated!"
        if ${FOUND}; then
            case ${ACTION} in
                "rf") ACTION_STRING="Resetting" ;;
                "rm"*) ACTION_STRING="Removing" ;;
                *) die "Invalid action: ${ACTION}" ;;
            esac

            echo "${ACTION_STRING} ${CONFLICT}..."
            git "${ACTION}" "${CONFLICT}" &>/dev/null
        else
            die "${CONFLICT} not accounted for, bailing out!"
        fi
    done
    [[ -n "$(git cf)" ]] && die "Resetting conflicts failed!"

    header "Applying all patches"
    [[ "$(basename "${PWD}")" != "op6" && "$(git cb)" != "lineage-15.1" ]] && { git ap "${PATCHES_FOLDER}"/binder.c.diff || exit 1; }
    case "$(basename "${PWD}"):$(git cb)" in
        bluecross:*) PATCH_FILE=f2fs-bluecross.patch-series ;;
        msm-4.9:*r7*) PATCH_FILE=f2fs-msm-4.9-r7.patch-series ;;
        op6:lineage-15.1) PATCH_FILE=f2fs-op6-lineage-15.1.patch-series ;;
        msm-4.9:*r11*|op6*) PATCH_FILE=f2fs-msm-4.9-r11.patch-series ;;
    esac
    [[ -n ${PATCH_FILE} ]] && { git rf fs/f2fs; git ap "${PATCHES_FOLDER}"/${PATCH_FILE} || exit 1; }

    header "Committing merge"
    git fm || exit 1
fi
